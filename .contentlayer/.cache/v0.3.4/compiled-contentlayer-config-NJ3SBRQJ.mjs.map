{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\n\nexport const Doc = defineDocumentType(() => ({\n  name: \"Doc\",\n  filePathPattern: `docs/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    description: { type: \"string\" },\n    date: { type: \"date\" },\n    toc: { type: \"boolean\", default: true, required: false },\n    group: { type: \"string\", required: true }, // For sidebar grouping\n    order: { type: \"number\", required: false }, // For ordering within a group\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => `/${doc._raw.flattenedPath}`,\n    },\n    slugAsParams: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n    },\n    headings: {\n      type: \"json\",\n      resolve: async (doc) => {\n        const regXHeader = /\\n(?<flag>#{2,3})\\s+(?<content>.+)/g;\n        const headings = Array.from(doc.body.raw.matchAll(regXHeader)).map(\n          ({ groups }) => {\n            const flag = groups?.flag;\n            const content = groups?.content;\n            return {\n              level: flag?.length,\n              text: content,\n              slug: content\n                ?.toLowerCase()\n                .replace(/\\s+/g, \"-\")\n                .replace(/[^\\w-]+/g, \"\"),\n            };\n          }\n        );\n        return headings;\n      },\n    },\n  },\n}));\n\nconst rehypePrettyCodeOptions = {\n  theme: \"one-dark-pro\", // or any other theme Shiki supports\n  onVisitLine(node) {\n    // Prevent lines from collapsing in `display: grid` mode, and allow empty\n    // lines to be copy/pasted\n    if (node.children.length === 0) {\n      node.children = [{ type: \"text\", value: \" \" }];\n    }\n  },\n  onVisitHighlightedLine(node) {\n    node.properties.className.push(\"line--highlighted\");\n  },\n  onVisitHighlightedWord(node) {\n    node.properties.className = [\"word--highlighted\"];\n  },\n};\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Doc],\n  disableImportAliasWarning: true,\n  mdx: {\n    rehypePlugins: [[rehypePrettyCode, rehypePrettyCodeOptions]],\n  },\n});\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,sBAAsB;AAEtB,IAAM,MAAM,mBAAmB,OAAO;AAAA,EAC3C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,SAAS;AAAA,IAC9B,MAAM,EAAE,MAAM,OAAO;AAAA,IACrB,KAAK,EAAE,MAAM,WAAW,SAAS,MAAM,UAAU,MAAM;AAAA,IACvD,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA;AAAA,IACxC,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA;AAAA,EAC3C;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,IAC9C;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,IACvE;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS,OAAO,QAAQ;AACtB,cAAM,aAAa;AACnB,cAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,UAAU,CAAC,EAAE;AAAA,UAC7D,CAAC,EAAE,OAAO,MAAM;AACd,kBAAM,OAAO,QAAQ;AACrB,kBAAM,UAAU,QAAQ;AACxB,mBAAO;AAAA,cACL,OAAO,MAAM;AAAA,cACb,MAAM;AAAA,cACN,MAAM,SACF,YAAY,EACb,QAAQ,QAAQ,GAAG,EACnB,QAAQ,YAAY,EAAE;AAAA,YAC3B;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAM,0BAA0B;AAAA,EAC9B,OAAO;AAAA;AAAA,EACP,YAAY,MAAM;AAGhB,QAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,WAAK,WAAW,CAAC,EAAE,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,IAC/C;AAAA,EACF;AAAA,EACA,uBAAuB,MAAM;AAC3B,SAAK,WAAW,UAAU,KAAK,mBAAmB;AAAA,EACpD;AAAA,EACA,uBAAuB,MAAM;AAC3B,SAAK,WAAW,YAAY,CAAC,mBAAmB;AAAA,EAClD;AACF;AAEA,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,GAAG;AAAA,EACnB,2BAA2B;AAAA,EAC3B,KAAK;AAAA,IACH,eAAe,CAAC,CAAC,kBAAkB,uBAAuB,CAAC;AAAA,EAC7D;AACF,CAAC;",
  "names": []
}
